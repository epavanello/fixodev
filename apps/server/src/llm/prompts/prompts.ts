/* eslint-disable */
/* prettier-ignore */
// Auto-generated by scripts/generate-prompts.ts
// Do not edit this file manually.

import * as fs from 'fs/promises';
import * as path from 'path';
import { fileURLToPath } from 'url';
import * as Handlebars from 'handlebars'; // Ensure consistent import

// It is expected that this generated file (prompts.ts) is in the same directory 
// as the .md (or .hbs) template files it references.
// If not, __dirname logic might need adjustment or paths made absolute from project root.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename); 

// --- Argument Types ---
export type IssueArgs = {
  readonly assignees?: string;
  readonly author: string;
  readonly body?: string;
  readonly comments?: Array<{
    readonly body?: string;
    readonly createdAt: string;
    readonly updatedAt?: string;
    readonly user: string;
    }>;
  readonly createdAt: string;
  readonly issueNumber: string;
  readonly labels?: string;
  readonly owner: string;
  readonly repo: string;
  readonly state: string;
  readonly title: string;
  readonly updatedAt?: string;
};

export type PrUpdateArgs = {
  readonly author: string;
  readonly baseBranch: string;
  readonly body?: string;
  readonly comments?: Array<{
    readonly body?: string;
    readonly createdAt: string;
    readonly updatedAt?: string;
    readonly user: string;
    }>;
  readonly createdAt: string;
  readonly diff: string;
  readonly headBranch: string;
  readonly instructions?: string;
  readonly labels?: string;
  readonly linkedIssueContext?: string;
  readonly owner: string;
  readonly prNumber: string;
  readonly repo: string;
  readonly state: string;
  readonly title: string;
  readonly updatedAt?: string;
};

export type SystemArgs = {
  readonly completionToolName?: string;
  readonly maxLines: string;
  readonly maxReadFileCalls: string;
  readonly readFileTool: string;
  readonly thinkTool: string;
  readonly toolsAvailable?: Array<{
    readonly description: string;
    readonly name: string;
    }>;
};

export type TestArgs = {
  readonly features: Array<{
    readonly details?: {
      readonly description: string;
      readonly version: string;
    };
    readonly id: string;
    readonly isEnabled?: string;
    readonly name: string;
    readonly subTasks: Array<{
      readonly completed?: string;
      readonly name: string;
      }>;
    }>;
  readonly hasContributors?: string;
  readonly projectName: string;
  readonly projectOwner: {
    readonly email: string;
    readonly name: string;
  };
  readonly projectStatus: string;
};


// --- Prompt Generation Functions ---

/**
 * Generates the 'issue.md' prompt using Handlebars.
 * Template sub-path relative to prompts directory: issue.md
 */
export async function generateIssuePrompt(
  args: IssueArgs
): Promise<string> {
  const templatePath = path.resolve(process.cwd(), 'prompts', 'issue.md');
  const templateContent = await fs.readFile(templatePath, 'utf-8');
  const compiledTemplate = Handlebars.compile(templateContent);
  return compiledTemplate(args);
}


/**
 * Generates the 'pr-update.md' prompt using Handlebars.
 * Template sub-path relative to prompts directory: pr-update.md
 */
export async function generatePrUpdatePrompt(
  args: PrUpdateArgs
): Promise<string> {
  const templatePath = path.resolve(process.cwd(), 'prompts', 'pr-update.md');
  const templateContent = await fs.readFile(templatePath, 'utf-8');
  const compiledTemplate = Handlebars.compile(templateContent);
  return compiledTemplate(args);
}


/**
 * Generates the 'system.md' prompt using Handlebars.
 * Template sub-path relative to prompts directory: system.md
 */
export async function generateSystemPrompt(
  args: SystemArgs
): Promise<string> {
  const templatePath = path.resolve(process.cwd(), 'prompts', 'system.md');
  const templateContent = await fs.readFile(templatePath, 'utf-8');
  const compiledTemplate = Handlebars.compile(templateContent);
  return compiledTemplate(args);
}


/**
 * Generates the 'test.md' prompt using Handlebars.
 * Template sub-path relative to prompts directory: test.md
 */
export async function generateTestPrompt(
  args: TestArgs
): Promise<string> {
  const templatePath = path.resolve(process.cwd(), 'prompts', 'test.md');
  const templateContent = await fs.readFile(templatePath, 'utf-8');
  const compiledTemplate = Handlebars.compile(templateContent);
  return compiledTemplate(args);
}
